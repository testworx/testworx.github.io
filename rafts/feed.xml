<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="http://www.testworx.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://www.testworx.io/" rel="alternate" type="text/html" /><updated>2016-07-04T06:58:49+01:00</updated><id>http://www.testworx.io/</id><title>Testworx</title><subtitle>“A technical testing blog covering Selenium, Jmeter, test automation and performance testing.“</subtitle><entry><title>Auto Generating JMeter Test Plans Pt. 2</title><link href="http://www.testworx.io/2016/06/27/dynamic-generation-of-jmeter-scripts-pt2/" rel="alternate" type="text/html" title="Auto Generating JMeter Test Plans Pt. 2" /><published>2016-06-27T01:00:00+01:00</published><updated>2016-06-27T01:00:00+01:00</updated><id>http://www.testworx.io/2016/06/27/dynamic-generation-of-jmeter-scripts-pt2</id><content type="html" xml:base="http://www.testworx.io/2016/06/27/dynamic-generation-of-jmeter-scripts-pt2/">&lt;p&gt;This is a continuation of &lt;a href=&quot;/2016/06/01/dynamic-generation-of-jmeter-scripts-pt1/&quot;&gt;part 1&lt;/a&gt; where we recorded a JMeter test plan using Geb to drive the application under test.  We are now ready to do some initial correlation.  I will have to leave post procesing for a 3rd post as I haven&#39;t had time to get the content together yet.&lt;/p&gt;

&lt;h2&gt;Git Repository&lt;/h2&gt;
&lt;p&gt;A git repository is available containing all the files used in this blog post:  &lt;a href=&quot;https://github.com/testworx/jmeter-test-plan-generator&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Correlation&lt;/h2&gt;
&lt;p&gt;Once the script has been recorded, you need to go through and identify any session specific values for correlation.  &lt;a href=&quot;http://jmeter.apache.org/usermanual/component_reference.html#Regular_Expression_Extractor&quot;&gt;JMeter Regular Expression Extractors&lt;/a&gt; are ideal for pulling this data from a response and making it available for future requests.&lt;/p&gt;
&lt;p&gt;I tend to have two JMeter sessions open at this point, one with the recorded script in &lt;a href=&quot;https://github.com/testworx/jmeter-test-plan-generator/blob/master/src/main/resources/Recording.Template.jmx&quot;&gt;&lt;i&gt;src/main/resources/Recording.Template.jmx&lt;/i&gt;&lt;/a&gt;, and one with &lt;a href=&quot;https://github.com/testworx/jmeter-test-plan-generator/blob/master/src/main/resources/TestPlan.Template.jmx&quot;&gt;&lt;i&gt;src/main/resources/TestPlan.Template.jmx&lt;/i&gt;&lt;/a&gt; open.  As items for correlation are identified, find the first response that returns that value in the View Results Tree Listener under the Workbench (in the Recording Test Plan).  Construct a regular expression that uniquely identifies that value in the response and put it into a new Regular Expression Extractor in the root of the test plan within TestPlan.Template.jmx.  Putting it in the root of the test plan means that it will apply to all responses.&lt;/p&gt;

&lt;p&gt;In the case of the test plan recorded earlier, we did a search for Wikipedia then clicked on the first result which took us to Wikipedia.org which has been hard coded in the recorded test plan.  For the purposes of this post, lets say we wanted to dynamically determine what URL the first result would take us to, and then browse to that URL.  We would need to do the following:

&lt;ol&gt;
  &lt;li&gt;Correlate the URL using a regular expression extractor&lt;/li&gt;
  &lt;li&gt;Add this extractor to the &lt;a href=&quot;https://github.com/testworx/jmeter-test-plan-generator/blob/master/src/main/resources/TestPlan.Template.jmx&quot;&gt;&lt;i&gt;TestPlan.Template.jmx&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Write a groovy script that will perform correlation using this extractor automatically on test plans we record in the future.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Correlate the URL using a regular expression extractor.&lt;/h2&gt;
&lt;p&gt;When we perform a Google search we click one of the result links and go to the relevant URL.  To simulate this using JMeter we need to identify the request that gives us this URL and correlate it so we can pull it out dynamically.&lt;/p&gt;
&lt;p&gt;In the screenshot below we can see that the URL is given to us in the response to request 51.  Note that this request number is likely to change when you record the test yourself.&lt;br /&gt;
&lt;img src=&quot;/assets/img/jmeter_test_plans/correlation_1.png&quot; style=&quot;width:580px&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Once we know which response gives us our result URL we can construct a regular expression to pull out what we want.  In this instance, the following gives us what we need: &#39;&lt;i&gt;x22([a-z]+):\\\/\\\/(.+?)\\\/\\\\x22&lt;/i&gt;&#39;.
I don&#39;t claim to be an expert at regexes so I am sure there is a more elegant verion but this works (at the time of writing).
&lt;img src=&quot;/assets/img/jmeter_test_plans/correlation_2.png&quot; style=&quot;width:580px&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Add a Regular Expression Extractor to the Test Plan Template&lt;/h2&gt;
&lt;p&gt;Now we have identified the regular expression that will pull out the information we need, we need to add this to our &lt;a href=&quot;https://github.com/testworx/jmeter-test-plan-generator/blob/master/src/main/resources/TestPlan.Template.jmx&quot;&gt;&lt;i&gt;test plan template&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following screenshot shows the configuration that should be used for the Regular Expression Extractor.&lt;img src=&quot;/assets/img/jmeter_test_plans/regex_1.png&quot; style=&quot;width:580px&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It is worth briefly explaining the different parameters we have used in this post processor.
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Reference Name&lt;/b&gt; - this is the name by which we will reference the extracted value.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Regular Expression&lt;/b&gt; - this is the expression used to extract the data we want to use.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Temple&lt;/b&gt; - In the expression we are using, there are actually two parts:  &lt;b&gt;([a-z]+)&lt;/b&gt; &amp;amp; &lt;b&gt;(.+?)&lt;/b&gt;.  The template allows us to define which bits we use and in which order.  In this case we are only going to use the second part.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Match No&lt;/b&gt; - If there are multiple matches, we can specify which match we would like to use.  In this case we are only going to use the first match.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Default Value&lt;/b&gt; - This allows us to define the default value to use if we don&#39;t get a match for a particular response.  Given the we have put this post processor in the root of our test plan, it will apply to &lt;b&gt;all&lt;/b&gt; responses. As such it is highly likely that at some point we won&#39;t get a match.  To mitigate this, I am referencing the parameter recursively.  Once it is initialised, it will stay intialised.  In this instance any other default value would be bad as we might find a match in one response, then overwrite it in the next with a default value because we have not found another match.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;Part 3 will tie all of this together.  We will cover writing a Groovy script to process the recorded JMeter test plan and replace the original search result URL with the value pulled out using the Regular Expression Extractor.  At that point we should hopefully be in a position to change our automated UI test to perform an entirely different search and record  a new performance test script with (almost!) no manual involvement.&lt;/p&gt;
&lt;/p&gt;</content><author><name>Nick Oppersdorff</name></author><summary>This is a continuation of part 1 where we recorded a JMeter test plan using Geb to drive the application under test.  We are now ready to do some initial correlation.  I will have to leave post procesing for a 3rd post as I haven&#39;t had time to get the content together yet.</summary></entry><entry><title>Auto Generating JMeter Test Plans Pt. 1</title><link href="http://www.testworx.io/2016/06/01/dynamic-generation-of-jmeter-scripts-pt1/" rel="alternate" type="text/html" title="Auto Generating JMeter Test Plans Pt. 1" /><published>2016-06-01T13:00:00+01:00</published><updated>2016-06-01T13:00:00+01:00</updated><id>http://www.testworx.io/2016/06/01/dynamic-generation-of-jmeter-scripts-pt1</id><content type="html" xml:base="http://www.testworx.io/2016/06/01/dynamic-generation-of-jmeter-scripts-pt1/">&lt;p&gt;Recently my team and I faced an issue where we were going to have do frequent early performance testing as part of a large upgrade project.  Whilst it was great to be given the opportunity to do this early performance testing, we didn&#39;t want to get into the mess of trying to maintain performance tests for an application that was still being developed, in addition to maintaining our functional automated test pack.&lt;/p&gt;

&lt;p&gt;To get around this we decided to use our functional automated tests to drive the application and use JMeter to record the traffic which would form the basis of our performance test scripts.  The reasoning was that we could then focus on our automated test maintenance as normal, and carry out performance testing as required, but treat our performance test scripts as disposable assets that we could regenerate quickly as required.&lt;/p&gt;

&lt;p&gt;There are 4 main parts to this process:
&lt;ol&gt;
&lt;li&gt;Recording the Test Plan&lt;/li&gt;
&lt;li&gt;Correlation&lt;/li&gt;
&lt;li&gt;Post Processing Using Groovy&lt;/li&gt;
&lt;li&gt;Replay &amp;amp; Debugging&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;h2&gt;Git Repository&lt;/h2&gt;
&lt;p&gt;A GitHub repository is available containing all the files used in this blog post:  &lt;a href=&quot;https://github.com/testworx/jmeter-test-plan-generator&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Recording&lt;/h2&gt;
&lt;p&gt;Recording browser traffic with JMeter using a &lt;a href=&quot;http://jmeter.apache.org/usermanual/component_reference.html#HTTP(S)_Test_Script_Recorder&quot;&gt;Proxy Recorder&lt;/a&gt; is well documented on the &lt;a href=&quot;http://jmeter.apache.org/usermanual/jmeter_proxy_step_by_step.pdf&quot;&gt;JMeter website&lt;/a&gt; and a sample test plan is available in the the Github repo above in &lt;a href=&quot;https://github.com/testworx/jmeter-test-plan-generator/blob/master/src/main/resources/Recording.Template.jmx&quot;&gt;&lt;i&gt;src/main/resources/Recording.Template.jmx&lt;/i&gt;&lt;/a&gt; to make the job easier.&lt;/p&gt;
&lt;p&gt;it might not be obvious how to route your automated tests through JMeter so that traffic can be recorded.  To do this we will specify a proxy when creating the browser using Geb.  Note that the same method is used with Selenium.  An example GebConfig file can be found in &lt;a href=&quot;https://github.com/testworx/jmeter-test-plan-generator/blob/master/src/test/resources/GebConfig.groovy&quot;&gt;&lt;i&gt;src/test/resources&lt;/i&gt;&lt;/a&gt; that will send browser traffic through JMeter.&lt;/p&gt;

&lt;p&gt;
  &lt;ol&gt;
    &lt;li&gt;clone the &lt;a href=&quot;https://github.com/testworx/jmeter-test-plan-generator&quot;&gt;project&lt;/a&gt; and navigate to the root of the project on the command line.&lt;/li&gt;
    &lt;li&gt;Run the following command:  &lt;i&gt;gradlew jmGui -Precord&lt;/i&gt; - jmeter should now be open.&lt;/li&gt;
    &lt;li&gt;Navigate to the Workbench.&lt;/li&gt;
    &lt;li&gt;Select HTTP(S) Test Script Recorder and click Start.
    &lt;img src=&quot;/assets/img/jmeter_test_plans/proxy_recorder.png&quot; style=&quot;width:650px&quot; /&gt;&lt;/li&gt;
    &lt;li&gt;Click Ok on the Root CA Certificate popup&lt;br /&gt;
    &lt;img src=&quot;/assets/img/jmeter_test_plans/ca_cert_popup.png&quot; style=&quot;width:580px&quot; /&gt;&lt;/li&gt;
    &lt;li&gt;You are now ready to start recording traffic from an automated test.&lt;/li&gt;
    &lt;li&gt;Open another command prompt and navigate to the root of the project folder again.&lt;/li&gt;
    &lt;li&gt;Run &lt;i&gt;gradlew firefoxJmeterTest&lt;/i&gt; - Firefox should open and run the demo test against Google.&lt;/li&gt;
    &lt;li&gt;Once the test has finished, switch to JMeter and view the transactions that have been recorded under the Recording Controller and click Save.
    &lt;img src=&quot;/assets/img/jmeter_test_plans/recorded_transactions.png&quot; style=&quot;width:650px&quot; /&gt;&lt;/li&gt;
    &lt;li&gt;We have now recorded our initial test plan ready for correlation and post processing&lt;/li&gt;
  &lt;/ol&gt;
&lt;/p&gt;

&lt;p&gt;Tune in for Part 2 where we discuss correlation and post processing.&lt;/p&gt;</content><author><name>Nick Oppersdorff</name></author><summary>Recently my team and I faced an issue where we were going to have do frequent early performance testing as part of a large upgrade project.  Whilst it was great to be given the opportunity to do this early performance testing, we didn&#39;t want to get into the mess of trying to maintain performance tests for an application that was still being developed, in addition to maintaining our functional automated test pack.</summary></entry><entry><title>My new blog.</title><link href="http://www.testworx.io/2016/02/10/new-blog/" rel="alternate" type="text/html" title="My new blog." /><published>2016-02-10T12:00:00+00:00</published><updated>2016-02-10T12:00:00+00:00</updated><id>http://www.testworx.io/2016/02/10/new-blog</id><content type="html" xml:base="http://www.testworx.io/2016/02/10/new-blog/">&lt;p&gt;Welcome to my new blog. It is very much a work in progress but I hope to use this as a way of sharing the more technically focussed testing lessons I learn. Hopefully it will be of use to someone else.&lt;/p&gt;

&lt;p&gt;Expect to see articles on performance testing and test automation, in particular framework design and building maintainable test packs as this is something I have a strong interest in.&lt;/p&gt;

&lt;p&gt;I intend to supplement the blog (or maybe it&#39;s the other way around!) with libraries on Github. These are libraries I have written in my own time to solve real problems identified during my day job.&lt;/p&gt;

&lt;p&gt;All my useful code is published under the TestWorx GitHub organisation.  I decided to create this to separate anything useful that I wanted to share, from repositories I have forked or code that isn&#39;t considered functional that you might find under my personal account.&lt;/p&gt;</content><author><name>Nick Oppersdorff</name></author><summary>Welcome to my new blog. It is very much a work in progress but I hope to use this as a way of sharing the more technically focussed testing lessons I learn. Hopefully it will be of use to someone else.</summary></entry></feed>
