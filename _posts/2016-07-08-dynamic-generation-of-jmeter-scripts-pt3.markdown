---
layout:     post
title:      "Auto Generating JMeter Test Plans Pt. 3"
subtitle:   "Post Processing Using Groovy"
date:       2016-07-01 12:00:00
author:     "Nick Oppersdorff"
header-img: "img/post-bg-02.jpg"
---

<p>This is part 3 of a series where I am demonstrating how we can auto generate a JMeter test plan using Geb and then automatically perform correlation using a groovy script.  <a href="{% post_url 2016-06-01-dynamic-generation-of-jmeter-scripts-pt1 %}">Part 1</a> focussed on integrating Geb with JMeter so that we could record the browser traffic generated by our automated tests.  <a href="{% post_url 2016-06-27-dynamic-generation-of-jmeter-scripts-pt2 %}">Part 2</a> covered performing some initial correlation to establish what dynamic information we would need to correlate.  Part 3, this article, will cover developing the Groovy script to automatically correlate the JMeter test plan should we need to re-record it or record new ones.</p>

<h2>Git Repository</h2>
<p>A git repository is available containing all the files used in this blog series:  <a href="https://github.com/testworx/jmeter-test-plan-generator">here</a></p>

<h2>Post Processing</h2>
<p>Writing a Groovy script will enable us to programmatically parse the recorded JMeter test plan and replace specific recorded values with variable names from the regular expression extractors we developed in Part 2 of the series.  We build into the script, the ability to parameterise the correct request parameters with variable names for our Regular Expression Extractors.  The Groovy script in its entirety can be found here:  <a href="https://github.com/testworx/jmeter-test-plan-generator/blob/master/src/main/groovy/TestPlanParameteriser.groovy"><i>src/main/groovy/TestPlanParameteriser.groovy</i></a><br><br>Note that when we run this script, we run it from the groovy directory, NOT from the project root (this should probably be wrapped in a Gradle task).  All file paths in the script are relative to this directory.</p>

<h2>Breaking down the script.</h2>
<p>The first steps in this script read in the recorded test plan and the test plan template <i>.jmx</i> files:<br>
<pre><code>Node test_recording = new XmlParser().parse('../resources/Recording.Template.jmx')<br>
Node test_template = new XmlParser().parse('../resources/TestPlan.Template.jmx')<br>
Node test_plan = test_template<br></code></pre></p>

<p>The next stage once we have read in the test plan is to iterate through the 'elementProp' nodes and find the 'url' value node.  Once we have found it, we replace the recorded value with a reference to the <b>RESULT_URL</b> variable we created using the Regular Expression Extractor in <a href="{% post_url 2016-06-27-dynamic-generation-of-jmeter-scripts-pt2 %}">Part 2</a>:<br>
<pre><code>test_recording.'**'.findAll { elementProp ->
    elementProp.@name == 'url' }.each {
    it.'**'.findAll { stringProp ->
        stringProp.@name == 'Argument.value' }.each {
          println 'stringProp: parameterising value: '+it.value()
        it.children()[0] = '${RESULT_URL}'
    }
}</code></pre></p>
